#!/bin/bash\n# filepath: /workspaces/jetc/buildx/scripts/env_update.sh\n\n# =========================================================================\n# .env File Update Script\n# Responsibility: Safely update variables and lists in the .env file.\n# =========================================================================\n\n# --- Dependencies ---\nSCRIPT_DIR_ENV_UPDATE=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nENV_FILE=\"$(realpath \"$SCRIPT_DIR_ENV_UPDATE/../.env\")\" # Canonical path to .env\n\n# Source required scripts (use fallbacks if sourcing fails)\nif [ -f \"$SCRIPT_DIR_ENV_UPDATE/env_setup.sh\" ]; then\n    # shellcheck disable=SC1091\n    source \"$SCRIPT_DIR_ENV_UPDATE/env_setup.sh\"\nelse\n    echo \"Warning: env_setup.sh not found. Logging/colors may be basic.\" >&2\n    log_info() { echo \"INFO: $1\"; }\n    log_warning() { echo \"WARNING: $1\" >&2; }\n    log_error() { echo \"ERROR: $1\" >&2; }\n    log_success() { echo \"SUCCESS: $1\"; }\n    log_debug() { :; }\nfi\n\n# --- Functions --- #\n\n# Update or add a variable in the .env file\n# Input: $1 = key (variable name)\n# Input: $2 = value\n# Return: 0 on success, 1 on failure (e.g., file not found)\nupdate_env_var() {\n    local key=\"$1\"\n    local value=\"$2\"\n\n    if [ -z \"$key\" ]; then\n        log_error \"update_env_var: Key cannot be empty.\"\n        return 1\n    fi\n\n    if [ ! -f \"$ENV_FILE\" ]; then\n        log_warning \".env file not found at \'$ENV_FILE\'. Creating it.\"\n        touch \"$ENV_FILE\" || { log_error \"Failed to create .env file.\"; return 1; }\n    fi\n\n    log_debug \"Updating .env: Set \'$key\' to \'$value\'\"\n\n    # Escape special characters in key and value for sed\n    local escaped_key\nescaped_key=$(printf '%s\n' \"$key\" | sed -e 's/[\/&]/\\&/g')\n    local escaped_value\nescaped_value=$(printf '%s\n' \"$value\" | sed -e 's/[\/&]/\\&/g')\n\n    # Check if the key exists (commented or uncommented)\n    if grep -q -E \"^[#[:space:]]*${escaped_key}=\" \"$ENV_FILE\"; then\n        # Key exists, update it. Uncomment if necessary.\n        # Use # as delimiter for sed to avoid issues with paths in values\n        sed -i -E \"s#^[#[:space:]]*(${escaped_key}=).*#\\1${escaped_value}#\" \"$ENV_FILE\"\n        if [ $? -ne 0 ]; then\n            log_error \"Failed to update key \'$key\' in $ENV_FILE using sed.\"\n            return 1\n        fi\n        log_debug \" -> Updated existing key \'$key\' in $ENV_FILE\"\n    else\n        # Key does not exist, add it to the end\n        echo \"${key}=${value}\" >> \"$ENV_FILE\"\n        if [ $? -ne 0 ]; then\n            log_error \"Failed to append key \'$key\' to $ENV_FILE.\"\n            return 1\n        fi\n        log_debug \" -> Added new key \'$key\' to $ENV_FILE\"\n    fi\n\n    return 0\n}\n\n# Append a value to a list-like variable in the .env file, avoiding duplicates.\n# Input: $1 = key (variable name)\n# Input: $2 = value_to_add\n# Input: $3 = separator (optional, defaults to semicolon ';')\n# Return: 0 on success, 1 on failure\nappend_to_env_list() {\n    local key=\"$1\"\n    local value_to_add=\"$2\"\n    local separator=${3:-;}\n\n    if [ -z \"$key\" ]; then\n        log_error \"append_to_env_list: Key cannot be empty.\"\n        return 1\n    fi\n    if [ -z \"$value_to_add\" ]; then\n        log_warning \"append_to_env_list: Value to add is empty. Nothing to do.\"\n        return 0\n    fi\n\n    if [ ! -f \"$ENV_FILE\" ]; then\n        log_warning \".env file not found at \'$ENV_FILE\'. Cannot append.\"\n        # Optionally create the file and add the key/value? For now, fail.\n        return 1\n    fi\n\n    log_debug \"Appending to .env list: Add \'$value_to_add\' to \'$key\' (separator: \'$separator\')\"\n\n    # Read the current value (handling cases where key might be missing or commented)\n    local current_value\n    current_value=$(grep -E \"^${key}=\" \"$ENV_FILE\" | head -n 1 | cut -d'=' -f2-)\n\n    # Check if the value already exists in the list\n    # Use separator at beginning and end for robust matching\n    if echo \"${separator}${current_value}${separator}\" | grep -q \"${separator}${value_to_add}${separator}\"; then\n        log_debug \" -> Value \'$value_to_add\' already exists in list \'$key\'. No changes made.\"\n        return 0\n    fi\n\n    # Value does not exist, append it\n    local new_value\n    if [ -z \"$current_value\" ]; then\n        new_value=\"$value_to_add\"\n    else\n        new_value=\"${current_value}${separator}${value_to_add}\"\n    fi\n\n    # Use update_env_var to save the new list value\n    if update_env_var \"$key\" \"$new_value\"; then\n        log_debug \" -> Successfully appended \'$value_to_add\' to list \'$key\'.\"\n        return 0\n    else\n        log_error \" -> Failed to update list \'$key\' after appending.\"\n        return 1\n    fi\n}\n\n# --- Main Execution (for testing) ---\nif [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\n    log_info \"Running env_update.sh directly for testing...\"\n\n    # --- Test Setup --- #\n    test_env_file=\"/tmp/test_env_update_$$.env\"\n    echo \"# Test .env file\" > \"$test_env_file\"\n    echo \"EXISTING_VAR=old_value\" >> \"$test_env_file\"\n    echo \"#COMMENTED_VAR=commented_value\" >> \"$test_env_file\"\n    echo \"LIST_VAR=item1;item2\" >> \"$test_env_file\"\n    echo \"EMPTY_LIST=\" >> \"$test_env_file\"\n    export ENV_FILE=\"$test_env_file\" # Override ENV_FILE for testing\n    log_info \"Using temporary test .env file: $test_env_file\"\n    cat \"$test_env_file\"\n    echo \"--------------------\"\n\n    # --- Test Cases --- #\n    log_info \"Test 1: Update existing variable\"\n    update_env_var \"EXISTING_VAR\" \"new_value\"\n    cat \"$test_env_file\"\n    echo \"--------------------\"\n\n    log_info \"Test 2: Update commented variable (should uncomment)\"\n    update_env_var \"COMMENTED_VAR\" \"uncommented_value\"\n    cat \"$test_env_file\"\n    echo \"--------------------\"\n\n    log_info \"Test 3: Add new variable\"\n    update_env_var \"NEW_VAR\" \"hello world\"\n    cat \"$test_env_file\"\n    echo \"--------------------\"\n\n    log_info \"Test 4: Update variable with empty value\"\n    update_env_var \"EXISTING_VAR\" \"\"\n    cat \"$test_env_file\"\n    echo \"--------------------\"\n\n    log_info \"Test 5: Append to existing list (new item)\"\n    append_to_env_list \"LIST_VAR\" \"item3\"\n    cat \"$test_env_file\"\n    echo \"--------------------\"\n\n    log_info \"Test 6: Append to existing list (duplicate item)\"\n    append_to_env_list \"LIST_VAR\" \"item2\"\n    cat \"$test_env_file\"\n    echo \"--------------------\"\n\n    log_info \"Test 7: Append to empty list\"\n    append_to_env_list \"EMPTY_LIST\" \"first_item\"\n    cat \"$test_env_file\"\n    echo \"--------------------\"\n\n    log_info \"Test 8: Append to non-existent list (should create)\"\n    append_to_env_list \"NEW_LIST\" \"initial_item\"\n    cat \"$test_env_file\"\n    echo \"--------------------\"\n\n    log_info \"Test 9: Append with different separator\"\n    update_env_var \"COMMA_LIST\" \"a,b\"\n    append_to_env_list \"COMMA_LIST\" \"c\" \",\"\n    cat \"$test_env_file\"\n    echo \"--------------------\"\n\n    # --- Cleanup --- #\n    log_info \"Cleaning up test file: $test_env_file\"\n    rm \"$test_env_file\"\n    log_info \"Env update script test finished.\"\n    exit 0\nfi\n\n# File location diagram:\n# jetc/                          <- Main project folder\n# ├── buildx/                    <- Parent directory\n# │   └── scripts/               <- Current directory\n# │       └── env_update.sh      <- THIS FILE\n# └── ...                        <- Other project files\n#\n# Description: Provides functions to safely update variables and lists in the .env file.\n# Author: Mr K / GitHub Copilot\n# COMMIT-TRACKING: UUID-20250424-093500-ENVUPD\n